import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_invoices_osj101.json")logging = Logger(__name__).get_logger()@allure.feature('应付发票接口_OSJ101')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestReceivableOSJ101():    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 删除应付发票临时头表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN_TEMP WHERE "                         "SOURCE_TRX_ID LIKE  'OSJ101_20230612%'")        # 删除应付发票临时行表中数据        self.db.del_data("DELETE   FROM FDP_AP_INVOICE_LINE_ORIGIN_TEMP  WHERE "                         "SOURCE_LINE_ID LIKE  'OSJ101_20230612%'")        # 删除应付发票原始头表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN WHERE  "                         "SOURCE_TRX_ID LIKE  'OSJ101_20230612%'")        # 删除应付发票原始行表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_LINE_ORIGIN  WHERE "                         "SOURCE_LINE_ID LIKE  'OSJ101_20230612%'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 删除应付发票临时头表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN_TEMP WHERE "                         "SOURCE_TRX_ID LIKE  'OSJ101_20230612%'")        # 删除应付发票临时行表中数据        self.db.del_data("DELETE   FROM FDP_AP_INVOICE_LINE_ORIGIN_TEMP  WHERE "                         "SOURCE_LINE_ID LIKE  'OSJ101_20230612%'")        # 删除应付发票原始头表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN WHERE  "                         "SOURCE_TRX_ID LIKE  'OSJ101_20230612%'")        # 删除应付发票原始行表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_LINE_ORIGIN  WHERE "                         "SOURCE_LINE_ID LIKE  'OSJ101_20230612%'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型OSJ101是否正确生成数据")    @allure.story('业务类型OSJ101测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_receivable_OSJ101(self, case_data,base_headers):        with allure.step("准备OSJ101测试数据"):            url = conf.get("project_url", "url") + case_data["url"]            method = case_data["method"]            # 预期结果            expected = case_data["expected"]        # 调用应付发票接口，生成OSJ101数据        with allure.step("执行接口请求,生成OSJ101数据"):            response = self.http.send(url=url, method=method, json=case_data["json"],headers=base_headers)            result = response.json()        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert expected["code"] == result["code"]                assert expected["msg"] in result["msg"]                logging.info('断言成功,返回信息正确')                # 数据库断言--断言数据是否生成至应付发票临时表中，判断SOURCE_TRX_ID、行表status、头表status,以及行金额、税金额                if case_data["check_sql_01"]:                    if case_data["case_id"] == 'case_0':                        db_actual_results = list({db_actual_results for db_actual_results in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        try:                            assert db_actual_results[0][0] == case_data["json"]["sourceTrxId"]                            assert db_actual_results[0][1] == 'S'                            assert db_actual_results[0][2] == db_actual_results[0][5]+db_actual_results[0][6]                            assert db_actual_results[0][3] == db_actual_results[0][6]                            assert db_actual_results[0][4] == 'S'                            logging.info('断言成功,数据成功生成至应付发票临时表中，且发票行、发票头数据生成均正确')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                    elif case_data["case_id"] == 'case_1':                        db_actual_results_1 = list({db_actual_results_1 for db_actual_results_1 in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        try:                            assert db_actual_results_1[0][0] == case_data["json"]["sourceTrxId"]                            assert db_actual_results_1[0][1] == 'N'                            assert "行金额总和'400'与头金额'350'不一致" in db_actual_results_1[0][2]                            assert db_actual_results_1[0][3] == 'N'                            logging.info('断言成功,数据成功生成至应收事务临时表中,并且报错提醒')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                    elif case_data["case_id"] == 'case_2':                        db_actual_results_1 = list({db_actual_results_1 for db_actual_results_1 in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        try:                            assert db_actual_results_1[0][0] == case_data["json"]["sourceTrxId"]                            assert db_actual_results_1[0][1] == 'N'                            assert "'OSJ10108'的产品服务必传" in db_actual_results_1[0][2]                            assert db_actual_results_1[0][3] == 'N'                            logging.info('断言成功,数据成功生成至应收事务临时表中,并且报错提醒')                        except KeyError:                            logging.info('断言失败,数据生成错误')                    elif case_data["case_id"] == 'case_3':                        db_actual_results_1 = list({db_actual_results_1 for db_actual_results_1 in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        try:                            assert db_actual_results_1[0][1] == 'R'                            assert "已存在类型为'OSJ10109'的暂估ID" in db_actual_results_1[0][2]                            assert db_actual_results_1[0][3] == 'R'                            logging.info('断言成功,数据成功生成至应收事务临时表中,并且报错提醒')                        except KeyError:                            logging.info('断言失败,数据生成错误')                    elif case_data["case_id"] == 'case_4':                        db_actual_results_1 = list({db_actual_results_1 for db_actual_results_1 in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        print(db_actual_results_1)                        try:                            assert db_actual_results_1[0][0] == case_data["json"]["sourceTrxId"]                            assert db_actual_results_1[0][1] == 'N'                            assert "(AP|GL)]会计期间在财务数据平台已关闭" in db_actual_results_1[0][2]                            assert db_actual_results_1[0][3] == 'N'                            logging.info('断言成功,数据成功生成至应收事务临时表中,并且报错提醒')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                # 数据库断言--断言数据是否生成至应收事务临时表中，判断SOURCE_TRX_ID、行表status、头表status,以及行金额、税金额                if case_data["check_sql_02"]:                    if case_data["case_id"] == 'case_0':                        db_actual_results = list({db_actual_results for db_actual_results in                                                  list(self.db.get_all(case_data["check_sql_02"]))})                        try:                            assert db_actual_results[0][0] == case_data["json"]["sourceTrxId"]                            assert db_actual_results[0][1] == '0'                            assert db_actual_results[0][2] == db_actual_results[0][5] + db_actual_results[0][6]                            assert db_actual_results[0][3] == db_actual_results[0][6]                            assert db_actual_results[0][4] == '0'                            logging.info('断言成功,数据成功生成至应收事务临时表中')                        except KeyError:                            logging.info('断言失败,数据生成错误')                    elif case_data["case_id"] == 'case_1':                        db_actual_results_1 = list({db_actual_results_1 for db_actual_results_1 in                                                  list(self.db.get_all(case_data["check_sql_02"]))})                        print(db_actual_results_1)                        try:                            assert db_actual_results_1 == []                            logging.info('断言成功,数据未生成至应收事务临时表中')                        except KeyError:                            logging.info('断言失败,数据生成错误')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], expected))                raise i            else:                logging.info("用例OSJ101生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_OSJ101 = TestReceivableOSJ101()    self_test_OSJ101.test_receivable_OSJ101()