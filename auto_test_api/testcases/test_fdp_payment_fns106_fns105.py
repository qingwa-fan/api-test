import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_payment_fns106_fns105.json")logging = Logger(__name__).get_logger()@allure.feature('应付发票接口_FNS106,应付付款接口_FNS105')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestPaymentFNS105:    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 依次删除应付发票临时头表、行表, 应付发票原始头表、行表中FNS106数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN_TEMP WHERE "                         "SOURCE_TRX_ID LIKE  'FNS106_23062101%'")        self.db.del_data("DELETE   FROM FDP_AP_INVOICE_LINE_ORIGIN_TEMP  WHERE "                         "SOURCE_LINE_ID LIKE  '23062101%'")        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN WHERE  "                         "SOURCE_TRX_ID LIKE  'FNS106_23062101%'")        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_LINE_ORIGIN  WHERE "                         "SOURCE_LINE_ID LIKE  '23062101%'")        # 依次删除应付付款原始表、原始表、临时表、正式表中FNS105数据        self.db.del_data("DELETE FROM FDP_AP_PAYMENT_HEADER_ORIGIN_TEMP  WHERE SOURCE_TRX_ID = 'FNS105_2023062101'")        self.db.del_data("DELETE FROM FDP_AP_PAYMENT_HEADER_ORIGIN  WHERE SOURCE_TRX_ID = 'FNS105_2023062101'")        self.db.del_data("DELETE FROM FDP_AP_PAYMENT_HEADER_TEMP  WHERE SOURCE_TRX_ID = 'FNS105_2023062101'")        self.db.del_data("DELETE FROM FDP_AP_PAYMENT_HEADER_T WHERE SOURCE_TRX_ID = 'FNS105_2023062101'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 依次删除应付发票临时头表、行表, 应付发票原始头表、行表中FNS106数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN_TEMP WHERE "                         "SOURCE_TRX_ID LIKE  'FNS106_23062101%'")        self.db.del_data("DELETE   FROM FDP_AP_INVOICE_LINE_ORIGIN_TEMP  WHERE "                         "SOURCE_LINE_ID LIKE  '23062101%'")        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN WHERE  "                         "SOURCE_TRX_ID LIKE  'FNS106_23062101%'")        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_LINE_ORIGIN  WHERE "                         "SOURCE_LINE_ID LIKE  '23062101%'")        # 依次删除应付付款原始表、原始表、临时表、正式表中FNS105数据        self.db.del_data("DELETE FROM FDP_AP_PAYMENT_HEADER_ORIGIN_TEMP  WHERE SOURCE_TRX_ID = 'FNS105_2023062101'")        self.db.del_data("DELETE FROM FDP_AP_PAYMENT_HEADER_ORIGIN  WHERE SOURCE_TRX_ID = 'FNS105_2023062101'")        self.db.del_data("DELETE FROM FDP_AP_PAYMENT_HEADER_TEMP  WHERE SOURCE_TRX_ID = 'FNS105_2023062101'")        self.db.del_data("DELETE FROM FDP_AP_PAYMENT_HEADER_T WHERE SOURCE_TRX_ID = 'FNS105_2023062101'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型FNS106、FNS105是否正确生成数据")    @allure.story('业务类型FNS105、FNS106测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_payment_FNS105(self, case_data,base_headers):        with allure.step("准备FNS106、FNS105测试数据"):            FNS106_url = conf.get("project_url", "url") + case_data["FNS106_url"]            FNS105_url = conf.get("project_url", "url") + case_data["FNS105_url"]            method = case_data["method"]            # 预期结果            FNS106_expected = case_data["FNS106_expected"]            FNS105_expected = case_data["FNS105_expected"]        # 依次调用应付发票接口,生成FNS106数据; 应付付款接口,生成FNS105数据        with allure.step("执行接口请求,生成FNS106数据"):            response = self.http.send(url=FNS106_url, method=method, json=case_data["FNS106_json"],headers=base_headers)            FNS106_result = response.json()            # result = response.text        with allure.step("执行接口请求,生成FNS105数据"):            response = self.http.send(url=FNS105_url, method=method, json=case_data["FNS105_json"],headers=base_headers)            FNS105_result = response.json()        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert FNS106_expected["code"] == FNS106_result["code"]                assert FNS106_expected["msg"] in FNS106_result["msg"]                assert FNS105_expected["code"] == FNS105_result["code"]                assert FNS105_expected["msg"] == FNS105_result["msg"]                logging.info('断言成功,返回信息正确')                # 数据库断言--判断应付发票头表、行表中，数据是否准确生成                if case_data["check_sql_01"]:                    if case_data["case_id"] == 'case_0':                        db_actual_results = list({db_actual_results for db_actual_results in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        try:                            assert db_actual_results[0][0] == case_data["FNS106_json"]["sourceTrxId"]                            assert db_actual_results[0][1] == '0'                            assert db_actual_results[0][2] == case_data["FNS106_json"]["invoiceAmount"]                            assert db_actual_results[0][3] == '0'                            assert db_actual_results[0][4] == case_data["FNS106_json"]["invoiceLines"][0]["lineAmount"]                            assert db_actual_results[0][5] == db_actual_results[0][6]                            assert db_actual_results[0][7] == case_data["FNS106_json"]["companyCode"]                            logging.info('断言成功,数据成功生成至应付发票明细表中')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                # 数据库断言--判断跨币种收款明细表中,LGS121数据是否准确                if case_data["check_sql_02"]:                    if case_data["case_id"] == 'case_0':                        db_actual_results_02 = list({db_actual_results_02 for db_actual_results_02 in                                                  list(self.db.get_all(case_data["check_sql_02"]))})                        print(db_actual_results_02)                        try:                            assert db_actual_results_02[0][0] == case_data["FNS105_json"]["apPaymentHeaderReqs"][0]["sourceCode"]                            assert db_actual_results_02[0][1] == case_data["FNS105_json"]["apPaymentHeaderReqs"][0]["sourceTrxId"]                            assert db_actual_results_02[0][2] == case_data["FNS105_json"]["apPaymentHeaderReqs"][0]["sourceDocNumber"]                            assert db_actual_results_02[0][4] == case_data["FNS105_json"]["apPaymentHeaderReqs"][0]["companyCode"]                            assert db_actual_results_02[0][5] == case_data["FNS105_json"]["apPaymentHeaderReqs"][0]["trxTypeCode"]                            assert db_actual_results_02[0][6] == case_data["FNS105_json"]["apPaymentHeaderReqs"][0]["prepayFlag"]                            assert db_actual_results_02[0][8] == case_data["FNS105_json"]["apPaymentHeaderReqs"][0]["vendorNum"]                            assert db_actual_results_02[0][9] == case_data["FNS105_json"]["apPaymentHeaderReqs"][0]["vendorName"]                            assert db_actual_results_02[0][10] == case_data["FNS105_json"]["apPaymentHeaderReqs"][0]["bankAccountName"]                            assert db_actual_results_02[0][13] == case_data["FNS105_json"]["apPaymentHeaderReqs"][0]["apPaymentLineReqs"][0]["paymentAmount"]                            logging.info('断言成功,数据生成至应付付款明细表中')                        except KeyError as e:                            logging.info(f'断言失败，测试不通过:{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["FNS105_json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], FNS105_result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], FNS105_expected))                raise i            else:                logging.info("用例FNS105生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_FNS105 = TestPaymentFNS105()    self_test_FNS105.test_payment_FNS105()