import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_other_fns102_fns103.json")logging = Logger(__name__).get_logger()@allure.feature('其他业务接口1_FNS102_FNS103')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestPaymentFNS103:    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 依次删除其他业务接口临时表、原始表头/行中FNS102数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_TEMP WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_TEMP WHERE "                         "SOURCE_TRX_ID ='FNS102-202306252001')")        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_TEMP WHERE SOURCE_TRX_ID ='FNS102-202306252001'")        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_T WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_T WHERE "                         "SOURCE_TRX_ID ='FNS102-202306252001')")        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_T WHERE SOURCE_TRX_ID ='FNS102-202306252001'")        # 依次删除其他业务接口临时表、原始表头/行中FNS103数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_TEMP WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_TEMP WHERE "                         "SOURCE_TRX_ID ='FNS103-202306253001')")        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_TEMP WHERE SOURCE_TRX_ID ='FNS103-202306253001'")        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_T WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_T WHERE "                         "SOURCE_TRX_ID ='FNS103-202306253001')")        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_T WHERE SOURCE_TRX_ID ='FNS103-202306253001'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 依次删除其他业务接口临时表、原始表头/行中FNS102数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_TEMP WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_TEMP WHERE "                         "SOURCE_TRX_ID ='FNS102-202306252001')")        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_TEMP WHERE SOURCE_TRX_ID ='FNS102-202306252001'")        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_T WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_T WHERE "                         "SOURCE_TRX_ID ='FNS102-202306252001')")        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_T WHERE SOURCE_TRX_ID ='FNS102-202306252001'")        # 依次删除其他业务接口临时表、原始表头/行中FNS103数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_TEMP WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_TEMP WHERE "                         "SOURCE_TRX_ID ='FNS103-202306253001')")        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_TEMP WHERE SOURCE_TRX_ID ='FNS103-202306253001'")        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_T WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_T WHERE "                         "SOURCE_TRX_ID ='FNS103-202306253001')")        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_T WHERE SOURCE_TRX_ID ='FNS103-202306253001'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型FNS103是否正确生成数据")    @allure.story('业务类型FNS103测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_payment_FNS103(self, case_data,base_headers):        with allure.step("准备FNS103测试数据"):            url = conf.get("project_url", "url") + case_data["url"]            method = case_data["method"]            # 预期结果            FNS102_expected = case_data["FNS102_expected"]            FNS103_expected = case_data["FNS103_expected"]            print(FNS102_expected)            print(FNS103_expected)        # 调用其他业务接口1，生成FNS102数据        with allure.step("执行接口请求,生成FNS102数据"):            response = self.http.send(url=url, method=method, json=case_data["FNS102_json"],headers=base_headers)            FNS102_result = response.json()            # result = response.text            print(FNS102_result)        with allure.step("执行接口请求,生成FNS103数据"):            response = self.http.send(url=url, method=method, json=case_data["FNS103_json"],headers=base_headers)            FNS103_result = response.json()            print(FNS103_result)        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert FNS102_expected["code"] == FNS102_result["code"]                assert FNS102_expected["msg"] in FNS102_result["msg"]                assert FNS103_expected["code"] == FNS103_result["code"]                assert FNS103_expected["msg"] == FNS103_result["msg"]                logging.info('断言成功,返回信息正确')                # 数据库断言--断言数据FNS102是否生成至其他业务接口汇总头中，并且断言数据的准确性                if case_data["check_sql_01"]:                    origin_actul_results = list({origin_actul_results for origin_actul_results in                                               list(self.db.get_all(case_data["check_sql_01"]))})                    print(origin_actul_results)                try:                    assert origin_actul_results[0][0] == case_data["FNS102_json"][0]["sourceCode"]                    assert origin_actul_results[0][1] == case_data["FNS102_json"][0]["sourceTrxId"]                    logging.info('数据FNS102成功生成至其他业务接口汇总头表中')                except KeyError as e:                    logging.info(f'数据未生成至其他业务接口汇总头表中：{e}')                # 数据库断言--断言数据FNS102是否生成至其他业务接口汇总行表中，并且断言数据的准确性                if case_data["check_sql_02"]:                    origin_actul_results = list({origin_actul_results for origin_actul_results in                                               list(self.db.get_all(case_data["check_sql_02"]))})                    print(origin_actul_results)                try:                    assert origin_actul_results[0][0] == int(case_data["FNS102_json"][0]["lineRequestList"][0]["sourceLineId"])                    logging.info('数据FNS102成功生成至其他业务接口汇总行表中')                except KeyError as e:                    logging.info(f'数据FNS102未生成至其他业务接口汇总行表中：{e}')                # 数据库断言--断言数据FNS103是否生成至其他业务接口汇总头中，并且断言数据的准确性                if case_data["check_sql_03"]:                    origin_actul_results = list({origin_actul_results for origin_actul_results in                                               list(self.db.get_all(case_data["check_sql_03"]))})                    print(origin_actul_results)                try:                    assert origin_actul_results[0][0] == case_data["FNS103_json"][0]["sourceCode"]                    assert origin_actul_results[0][1] == case_data["FNS103_json"][0]["sourceTrxId"]                    logging.info('数据FNS103成功生成至其他业务接口汇总头表中')                except KeyError as e:                    logging.info(f'数据FNS103未生成至其他业务接口汇总头表中：{e}')                # 数据库断言--断言数据FNS103是否生成至其他业务接口汇总行表中，并且断言数据的准确性                if case_data["check_sql_04"]:                    origin_actul_results = list({origin_actul_results for origin_actul_results in                                               list(self.db.get_all(case_data["check_sql_04"]))})                    print(origin_actul_results)                try:                    assert origin_actul_results[0][0] == int(case_data["FNS103_json"][0]["lineRequestList"][0]["sourceLineId"])                    logging.info('数据FNS103成功生成至其他业务接口汇总行表中')                except KeyError as e:                    logging.info(f'数据FNS103未生成至其他业务接口汇总行表中：{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["FNS103_json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], FNS103_result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], FNS103_expected))                raise i            else:                logging.info("用例FNS103生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_payment_FNS103 = TestPaymentFNS103()    self_payment_FNS103.test_payment_FNS103()