import tracebackimport pytestfrom common.get_headers import GetHeadersfrom common.my_log import Loggerfrom common.send_mail import SendEmailfrom common.send_wechat import Enterprise_WeChat_notificationlogging = Logger("__name__").get_logger()@pytest.fixture(scope='class')def base_headers():    """    每个测试用例执行前都获取一遍请求头    """    headers = GetHeaders().get_headers()    yield headers    pass# def pytest_terminal_summary(terminalreporter, exitstatus, config):#     total = terminalreporter._numcollected#     passed = len([i for i in terminalreporter.stats.get('passed', []) if i.when != "setup" and i.when != "teardown"])#     failed = len([i for i in terminalreporter.stats.get('failed', []) if i.when != "setup" and i.when != "teardown"])#     error = len([i for i in terminalreporter.stats.get('error', []) if i.when != "setup" and i.when != "teardown"])#     skipped = len([i for i in terminalreporter.stats.get('skipped', []) if i.when != "setup" and i.when != "teardown"])#     wechat = Enterprise_WeChat_notification(total=total, passed=passed, failed=failed, error=error,#                                             skipped=skipped)#     # terminalreporter._sessionstarttime #会话开始时间#     # duration = time.time() - terminalreporter._sessionstarttime#     try:#         wechat.send()#     except AssertionError as i:#         logging.error("测试结果发送至企业微信群失败")#         raise i#     else:#         logging.info("测试结果发送至企业微信群成功")    # if passed == total:    #     test_results = "passed"    # else:    #     test_results = "failed"    #    # email = SendEmail(test_results=test_results, total=total,passed=passed, failed=failed)    # try:    #     email.send_email_by_att()    # except AssertionError as i:    #     error_inf = traceback.format_exc()    #     logging.error(f"发送邮件失败::失败::{i}::失败详情:{error_inf}")    #     raise i    # else:    #     logging.info("邮件发送成功，邮件标题：FDP接口自动化测试报告")