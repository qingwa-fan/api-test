import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_other_b2b135.json")logging = Logger(__name__).get_logger()@allure.feature('其他业务接口6_B2B135')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestOtherB2B135:    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 删除其他业务接口原始行表中数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_TEMP WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_TEMP WHERE "                         "SOURCE_TRX_ID LIKE 'B2B135_202306140%')")        # 删除其他业务接口原始头表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_TEMP WHERE SOURCE_TRX_ID LIKE 'B2B135_202306140%'")        # 删除其他业务接口正式行表中数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_T WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_T WHERE "                         "SOURCE_TRX_ID LIKE 'B2B135_202306140%')")        # 删除其他业务接口正式头表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_T WHERE SOURCE_TRX_ID LIKE 'B2B135_202306140%'")        # 刪除其他业务接口明细行表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_SUMMARY_DETAIL_LINE_T  WHERE HEADER_ID IN "                         "(SELECT HEADER_ID FROM FDP_FIN_COMMON_SUMMARY_DETAIL_T WHERE "                         "SOURCE_TRX_ID LIKE 'B2B135_202306140%')")        # 刪除其他业务接口明细头表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_SUMMARY_DETAIL_T WHERE SOURCE_TRX_ID LIKE 'B2B135_202306140%'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 删除其他业务接口原始行表中数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_TEMP WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_TEMP WHERE "                         "SOURCE_TRX_ID LIKE 'B2B135_202306140%')")        # 删除其他业务接口原始头表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_TEMP WHERE SOURCE_TRX_ID LIKE 'B2B135_202306140%'")        # 删除其他业务接口正式行表中数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_LINE_T WHERE HEADER_ID "                         "IN (SELECT HEADER_ID FROM FDP_FIN_COMMON_HEADER_T WHERE "                         "SOURCE_TRX_ID LIKE 'B2B135_202306140%')")        # 删除其他业务接口正式头表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_T WHERE SOURCE_TRX_ID LIKE 'B2B135_202306140%'")        # 刪除其他业务接口明细行表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_SUMMARY_DETAIL_LINE_T  WHERE HEADER_ID IN "                         "(SELECT HEADER_ID FROM FDP_FIN_COMMON_SUMMARY_DETAIL_T WHERE "                         "SOURCE_TRX_ID LIKE 'B2B135_202306140%')")        # 刪除其他业务接口明细头表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_SUMMARY_DETAIL_T WHERE SOURCE_TRX_ID LIKE 'B2B135_202306140%'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型B2B135是否正确生成数据，并且可以成功汇总且推送")    @allure.story('业务类型B2B135测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_other_B2B135(self, case_data,base_headers):        with allure.step("准备B2B135测试数据"):            url = conf.get("project_url", "url") + case_data["url"]            method = case_data["method"]            # 预期结果            expected = case_data["expected"]        # 调用其他业务接口6，生成B2B135数据        with allure.step("执行接口请求,生成B2B135数据"):            response = self.http.send(url=url, method=method, json=case_data["json"],headers=base_headers)            result = response.json()        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert expected["code"] == result["code"]                assert expected["msg"] == result["msg"]                # 数据库断言--断言数据是否生成至其他业务接口原始表中，并且断言数据的准确性                if case_data["check_sql_01"]:                    if case_data["case_id"] == 'case_0':                        db_actul_results = list({db_actul_results for db_actul_results in                                                    self.db.get_all(case_data["check_sql_01"])})                        try:                            assert db_actul_results[0][0] == case_data["json"][0]["sourceTrxId"]                            assert db_actul_results[0][1] == case_data["json"][0]["sourceCode"]                            assert db_actul_results[0][2] == case_data["json"][0]["companyCode"]                            assert db_actul_results[0][3] == case_data["json"][0]["trxTypeCode"]                            assert db_actul_results[0][4] == case_data["json"][0]["partyName"]                            assert db_actul_results[0][5] == case_data["json"][0]["paymentAccountName"]                            assert db_actul_results[0][6] == case_data["json"][0]["paymentAccountId"]                            logging.info('数据成功生成至其他业务接口临时表中,数据为有效数据')                        except KeyError as e:                            logging.info(f'数据未生成至其他业务接口临时行表中：{e}')                elif case_data["case_id"] == 'case_1':                        db_actul_results = list({db_actul_results for db_actul_results in                                             self.db.get_all(case_data["check_sql_01"])})                        try:                            assert db_actul_results[0][1] == 4                            assert db_actul_results[0][2] == '''{"msg":"1001-trxDatemust not be null ","code":500}'''                            logging.info('断言成功,数据成功生成至其他业务接口临时表中，且状态为4,数据为无效数据')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                elif case_data["case_id"] == 'case_2':                        db_actul_results = list({db_actul_results for db_actul_results in                                             self.db.get_all(case_data["check_sql_01"])})                        try:                            assert db_actul_results[0][1] == 4                            assert db_actul_results[0][2] == '''1001-companyCode公司代码不能为空 '''                            logging.info('断言成功,数据成功生成至其他业务接口临时表中，且状态为4,数据为无效数据')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                # 数据库断言--断言数据是否生成至其他业务接口明细表中，并且断言数据的准确性                if case_data["check_sql_02"]:                    if case_data["case_id"] == 'case_0':                        origin_actul_results = list({origin_actul_results for origin_actul_results in                                                   list(self.db.get_all(case_data["check_sql_02"]))})                        print(origin_actul_results)                    try:                        assert origin_actul_results[0][0] == case_data["json"]["sourceCode"]                        assert origin_actul_results[0][1] == case_data["json"]["sourceTrxId"]                        assert origin_actul_results[0][2] == case_data["json"]["sourceDocNumber"]                        assert origin_actul_results[0][3] == 0                        assert origin_actul_results[0][4] == case_data["json"]["companyCode"]                        assert origin_actul_results[0][5] == case_data["json"]["country"]                        assert origin_actul_results[0][6] == case_data["json"]["trxTypeCode"]                        assert origin_actul_results[0][7] == case_data["json"]["partyNum"]                        assert origin_actul_results[0][8] == case_data["json"]["partyName"]                        assert origin_actul_results[0][9] == case_data["json"]["paymentAccountName"]                        assert origin_actul_results[0][10] == int(case_data["json"]["paymentAccountId"])                        logging.info('数据成功生成至其他业务接口明细表中,并且状态为S,数据为有效数据')                    except KeyError as e:                        logging.info(f'数据未生成至其他业务接口明细表中：{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], expected))                raise i            else:                logging.info("用例B2B135生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_B2B135 = TestOtherB2B135()    self_test_B2B135.test_other_B2B135()