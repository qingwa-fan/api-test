import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_other_b2b106_b2b108.json")logging = Logger(__name__).get_logger()@allure.feature('其他业务接口7_B2B106_B2B108')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestOtherB2B108:    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 依次删除应收明细临时表、明细表中B2B106数据        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL_TEMP  WHERE  SOURCE_TRX_ID LIKE 'B2B-230619100%'")        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL WHERE SOURCE_TRX_ID LIKE 'B2B-230619100%'")        # 依次删除冲减暂估临时表、明细表中B2B108数据        self.db.del_data("DELETE FROM XX_OFFSET_ESTIMATE_DETAIL_TEMP WHERE SOURCE_TRX_ID LIKE 'B2B-230619100%'")        self.db.del_data("DELETE FROM XX_OFFSET_ESTIMATE_DETAIL WHERE SOURCE_TRX_ID LIKE 'B2B-230619100%'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 依次删除应收明细临时表、明细表中B2B106数据        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL_TEMP  WHERE  SOURCE_TRX_ID ='B2B-2306191003'")        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL WHERE SOURCE_TRX_ID ='B2B-2306191003'")        # 依次删除冲减暂估临时表、明细表中B2B108数据        self.db.del_data("DELETE FROM XX_OFFSET_ESTIMATE_DETAIL_TEMP WHERE SOURCE_TRX_ID ='B2B-2306191004'")        self.db.del_data("DELETE FROM XX_OFFSET_ESTIMATE_DETAIL WHERE SOURCE_TRX_ID ='B2B-2306191004'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型B2B108是否正确生成数据")    @allure.story('业务类型B2B108测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_other_B2B108(self, case_data,base_headers):        with allure.step("准备B2B108测试数据"):            B2B106_url = conf.get("project_url", "url") + case_data["B2B106_url"]            B2B108_url = conf.get("project_url", "url") + case_data["B2B108_url"]            method = case_data["method"]            # 预期结果            B2B106_expected = case_data["B2B106_expected"]            B2B108_expected = case_data["B2B108_expected"]        # 调用应收事务接口，生成B2B105数据        with allure.step("执行接口请求,生成B2B105数据"):            response = self.http.send(url=B2B106_url, method=method, json=case_data["B2B106_json"],headers=base_headers)            B2B106_result = response.json()            # result = response.text        with allure.step("执行接口请求,生成B2B107数据"):            response = self.http.send(url=B2B108_url, method=method, json=case_data["B2B108_json"],headers=base_headers)            B2B108_result = response.json()        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert B2B106_expected["code"] == B2B106_result["code"]                assert B2B106_expected["msg"] == B2B106_result["msg"]                assert B2B108_expected["code"] == B2B108_result["code"]                assert B2B108_expected["msg"] == B2B108_result["msg"]                logging.info('断言成功,返回信息正确')                # 数据库断言--判断应收收款明细表中,B2B106数据是否准确                if case_data["check_sql_01"]:                    if case_data["case_id"] == 'case_0':                        db_actual_results = list({db_actual_results for db_actual_results in                                                  self.db.get_all(case_data["check_sql_01"])})                        # print(db_actual_results)                        try:                            assert db_actual_results[0][0] == case_data["B2B106_json"][0]["sourceTrxId"]                            logging.info('断言成功,数据成功生成至应收明细表中')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                    elif case_data["case_id"] == 'case_1':                        db_actual_results = list({db_actual_results for db_actual_results in                                                  self.db.get_all(case_data["check_sql_01"])})                        try:                            assert db_actual_results[0][1] == 1                            assert db_actual_results[0][2] == "系统中不存在相同公司相同的暂估id暂估历史数据"                            logging.info('断言成功,数据生成至临时表中,且返回对应报错提示')                        except KeyError:                            logging.info('断言失败,数据生成错误')                # 数据库断言--判断跨币种收款明细表中,B2B108数据是否准确                if case_data["check_sql_02"]:                    if case_data["case_id"] == 'case_0':                        db_actual_results_02 = list({db_actual_results_02 for db_actual_results_02 in                                                  self.db.get_all(case_data["check_sql_02"])})                        try:                            assert db_actual_results_02[0][0] == case_data["B2B108_json"][0]["sourceTrxId"]                            logging.info('断言成功,数据生成至冲减暂估明细表中')                        except KeyError:                            logging.info('断言失败，测试不通过')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["B2B108_json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], B2B108_result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], B2B108_expected))                raise i            else:                logging.info("用例B2B108生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_B2B108 = TestOtherB2B108()    self_test_B2B108.test_other_B2B108()