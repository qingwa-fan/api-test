import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_invoices_b2b101.json")logging = Logger(__name__).get_logger()@allure.feature('应付发票接口接口_B2B101')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestinvoiceB2B101():    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 删除应付发票原始临时头表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN_TEMP  "                         "WHERE SOURCE_TRX_ID IN ('B2B101_23061001','B2B101_23061002')")        # 删除应付发票原始临时行表中数据        self.db.del_data("DELETE FROM FDP_AP_INVOICE_LINE_ORIGIN_TEMP  "                         "WHERE SOURCE_LINE_ID IN ('23061001','23061002')")        # 删除应付发票原始头表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN  "                         "WHERE   SOURCE_TRX_ID IN ('B2B101_23061001','B2B101_23061002')")        # 删除应付发票原始行表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_LINE_ORIGIN "                         "WHERE SOURCE_LINE_ID IN ('23061001','23061002')")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 删除应付发票原始临时头表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN_TEMP  "                         "WHERE SOURCE_TRX_ID IN ('B2B101_23061001','B2B101_23061002')")        # 删除应付发票原始临时行表中数据        self.db.del_data("DELETE FROM FDP_AP_INVOICE_LINE_ORIGIN_TEMP  "                         "WHERE SOURCE_LINE_ID IN ('23061001','23061002')")        # 删除应付发票原始头表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_HEADER_ORIGIN  "                         "WHERE   SOURCE_TRX_ID IN ('B2B101_23061001','B2B101_23061002')")        # 删除应付发票原始行表中数据        self.db.del_data("DELETE  FROM FDP_AP_INVOICE_LINE_ORIGIN "                         "WHERE SOURCE_LINE_ID IN ('23061001','23061002')")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型B2B101是否正确生成数据，并且可以成功汇总且推送")    @allure.story('业务类型B2B101测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_invoice_B2B101(self, case_data,base_headers):        with allure.step("准备B2B101测试数据"):            url = conf.get("project_url", "url") + case_data["url"]            method = case_data["method"]            # 预期结果            expected = case_data["expected"]        # 调用应付发票接口，生成B2B101数据        with allure.step("执行接口请求,生成B2B101数据"):            response = self.http.send(url=url, method=method, json=case_data["json"],headers=base_headers)            result = response.json()            print(result)        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert expected["code"] == result["code"]                assert expected["msg"] in result["msg"]                # 数据库断言--断言数据是否生成至应付发票原始临时头表中，判断SOURCE_TRX_ID、status,判断数据的有效性                if case_data["check_sql_01"]:                    if case_data["case_id"] == 'case_0':                        temp_header_results = list({temp_header_results for temp_header_results in                                                      list(self.db.get_all(case_data["check_sql_01"]))})                        try:                            assert temp_header_results[0][0] == case_data["json"]["sourceTrxId"]                            assert temp_header_results[0][1] == 'S'                            logging.info('数据成功生成至应付发票原始临时头表中,并且状态为S,数据为有效数据')                        except KeyError as e:                            logging.info(f'数据未生成至应付发票原始临时头表中：{e}')                    elif  case_data["case_id"] == 'case_1':                        temp_header_results_1= list({temp_header_results_1 for temp_header_results_1 in                                                        list(self.db.get_all(case_data["check_sql_01"]))})                        print(temp_header_results_1)                        try:                            assert temp_header_results_1[0][0] == case_data["json"]["sourceTrxId"]                            assert temp_header_results_1[0][1] == "N"                            assert "业务类型编码'B2B101'应该有明细" in temp_header_results_1[0][2]                            logging.info('数据成功生成至应付发票原始临时头表中,并且状态为N,数据为无效数据')                        except KeyError as e:                            logging.info(f'数据未生成至应付发票原始临时头表中：{e}')                # 数据库断言--断言数据是否生成至应付发票原始临时行表中，判断头表header_id是否等于行表header_id、sourceLineId、status,判断数据的有效性                if case_data["check_sql_02"]:                    temp_line_results = list({temp_line_results for temp_line_results in                                                  self.db.get_all(case_data["check_sql_02"])})                    try:                        assert temp_line_results[0][0] == int(case_data["json"]["invoiceLines"][0]["sourceLineId"])                        assert temp_line_results[0][1] == 'S'                        logging.info('数据成功生成至应付发票原始临时行表中,并且状态为S,数据为有效数据')                    except KeyError as e:                        logging.info(f'数据未生成至应付发票原始临时行表中：{e}')                # 数据库断言--断言数据是否生成至应付发票原始头表中，判断SOURCE_TRX_ID、汇总状态为0                if case_data["check_sql_03"]:                        origin_header_results = list({origin_header_results for origin_header_results in list(self.db.get_all(case_data["check_sql_03"]))})                        origin_header_id = origin_header_results[0][0]                        origin_header_status = origin_header_results[0][1]                        try:                            assert origin_header_id == case_data["json"]["sourceTrxId"]                            assert origin_header_status == '0'                            logging.info('数据成功生成至应付发票原始头表中,并且此时汇总状态为0')                        except KeyError as e:                            logging.info(f'数据未生成至应付发票原始头表中：{e}')                    # 数据库断言--断言数据是否生成至应付发票原始行表中，判断SOURCE_line_ID、汇总状态为0                if case_data["check_sql_04"]:                        origin_line_results = list({origin_line_results for origin_line_results in                                                      list(self.db.get_all(case_data["check_sql_04"]))})                        origin_line_id = origin_line_results[0][0]                        origin_line_status = origin_line_results[0][1]                        try:                            assert origin_line_id == int(case_data["json"]["invoiceLines"][0]["sourceLineId"])                            assert origin_line_status == '0'                            logging.info('数据成功生成至应付发票原始行表中,并且此时汇总状态为0')                        except KeyError as e:                            logging.info(f'数据未生成至应付发票原始行表中：{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], expected))                raise i            else:                logging.info("用例B2B101生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_B2B101 = TestinvoiceB2B101()    self_test_B2B101.test_invoice_B2B101()