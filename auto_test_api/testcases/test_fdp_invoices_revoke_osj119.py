import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_invoices_revoke_osj119.json")logging = Logger(__name__).get_logger()@allure.feature('发票取消接口_OSJ119')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestRevokeOSJ119():    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 删除发票取消接口临时表中数据        self.db.del_data("DELETE FROM FDP_AP_INVOICE_CANCEL_TEMP WHERE SOURCE_TRX_ID like '2023062000%'")        # 删除发票取消接口明细表中数据        self.db.del_data("DELETE FROM FDP_AP_INVOICE_CANCEL WHERE SOURCE_TRX_ID like '2023062000%'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 删除发票取消接口临时表中数据        self.db.del_data("DELETE FROM FDP_AP_INVOICE_CANCEL_TEMP WHERE SOURCE_TRX_ID like '2023062000%'")        # 删除发票取消接口明细表中数据        self.db.del_data("DELETE FROM FDP_AP_INVOICE_CANCEL WHERE SOURCE_TRX_ID like '2023062000%'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型OSJ119是否正确生成数据")    @allure.story('业务类型OSJ119测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_revoke_OSJ119(self, case_data,base_headers):        with allure.step("准备OSJ119测试数据"):            url = conf.get("project_url", "url") + case_data["url"]            method = case_data["method"]            # 预期结果            expected = case_data["expected"]        # 调用发票取消接口，生成OSJ119数据        with allure.step("执行接口请求,生成OSJ119数据"):            response = self.http.send(url=url, method=method, json=case_data["json"], headers=base_headers)            result = response.json()        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert expected["code"] == result["code"]                assert expected["msg"] in result["msg"]                logging.info('断言成功,返回信息正确')                # 数据库断言--断言数据是否生成至应付发票临时表中，判断SOURCE_TRX_ID、行表status、头表status,以及行金额、税金额                if case_data["check_sql_01"]:                    if case_data["case_id"] == 'case_0':                        db_actual_results = list({db_actual_results for db_actual_results in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        try:                            assert db_actual_results[0][1] == case_data["json"]["sourceCode"]                            assert db_actual_results[0][2] == case_data["json"]["sourceTrxId"]                            assert db_actual_results[0][3] == case_data["json"]["companyCode"]                            assert db_actual_results[0][4] == case_data["json"]["vendorNum"]                            assert db_actual_results[0][5] == case_data["json"]["sourceDocNumber"]                            assert db_actual_results[0][6] == case_data["json"]["invoiceNum"]                            assert db_actual_results[0][8] == case_data["json"]["cancelReason"]                            assert db_actual_results[0][9] == '0'                            assert db_actual_results[0][10] == None                            assert db_actual_results[0][15] == case_data["json"]["invoiceNum"]                            assert db_actual_results[0][16] == case_data["json"]["trxTypeCode"]                            logging.info('断言成功,数据成功生成至发票取消明细表中')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                    elif  case_data["case_id"] == 'case_1':                        db_actual_results = list({db_actual_results for db_actual_results in                                                  self.db.get_all(case_data["check_sql_01"])})                        try:                            assert db_actual_results[0][0] == "1154-校验'invoiceNum':must not be blank"                            assert db_actual_results[0][1] == 'N'                            assert db_actual_results[0][3] ==  case_data["json"][1]["sourceCode"]                            assert db_actual_results[0][4] == case_data["json"][1]["sourceTrxId"]                            assert db_actual_results[0][5] == case_data["json"][1]["sourceDocNumber"]                            logging.info('断言成功,数据成功生成至应付发票临时表中，且状态为N,数据为无效数据')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                    elif  case_data["case_id"] == 'case_2':                        db_actual_results = list({db_actual_results for db_actual_results in                                                  self.db.get_all(case_data["check_sql_01"])})                        try:                            assert db_actual_results[0][0] == "1154-校验'cancelDate':must not be null"                            assert db_actual_results[0][1] == 'N'                            assert db_actual_results[0][3] ==  case_data["json"][2]["sourceCode"]                            assert db_actual_results[0][4] == case_data["json"][2]["sourceTrxId"]                            assert db_actual_results[0][5] == case_data["json"][2]["sourceDocNumber"]                            logging.info('断言成功,数据成功生成至应付发票临时表中，且状态为N,数据为无效数据')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], expected))                raise i            else:                logging.info("用例OSJ119生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_OSJ119 = TestRevokeOSJ119()    self_test_OSJ119.test_revoke_OSJ119()