import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_invoicescancel_fns110.json")logging = Logger(__name__).get_logger()@allure.feature('发票取消接口_FNS110')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestInvoiceCancelFNS110:    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 依次删除发票取消临时表、正式表中FNS110数据        self.db.del_data("DELETE FROM FDP_AP_INVOICE_CANCEL_TEMP WHERE SOURCE_TRX_ID like 'FNS110-20230625100%'")        self.db.del_data("DELETE FROM FDP_AP_INVOICE_CANCEL WHERE SOURCE_TRX_ID like 'FNS110-20230625100%'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 依次删除发票取消临时表、正式表中FNS110数据        self.db.del_data("DELETE FROM FDP_AP_INVOICE_CANCEL_TEMP WHERE SOURCE_TRX_ID like 'FNS110-20230625100%'")        self.db.del_data("DELETE FROM FDP_AP_INVOICE_CANCEL WHERE SOURCE_TRX_ID like 'FNS110-20230625100%'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型FNS110是否正确生成数据")    @allure.story('业务类型FNS110测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_invoiceCancel_FNS110(self, case_data,base_headers):        with allure.step("准备FNS110测试数据"):            FNS110_url = conf.get("project_url", "url") + case_data["FNS110_url"]            method = case_data["method"]            # 预期结果            FNS110_expected = case_data["FNS110_expected"]            print(FNS110_expected)        # 调用发票取消接口，生成FNS110数据        with allure.step("执行接口请求,生成FNS110数据"):            response = self.http.send(url=FNS110_url, method=method, json=case_data["FNS110_json"],headers=base_headers)            FNS110_result = response.json()            print(FNS110_result)        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert FNS110_expected["code"] == FNS110_result["code"]                assert FNS110_expected["msg"] == FNS110_result["msg"]                logging.info('断言成功,返回信息正确')                # 数据库断言--判断发票取消临时表中,FNS110数据是否准确                if case_data["check_sql_01"]:                    if case_data["case_id"] == 'case_0':                        db_actual_results_01 = list({db_actual_results_01 for db_actual_results_01 in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        print(db_actual_results_01)                        try:                            assert db_actual_results_01[0][0] == case_data["FNS110_json"]["sourceTrxId"]                            logging.info('断言成功,数据生成至发票取消临时中')                        except KeyError:                            logging.info('断言失败，测试不通过')                # 数据库断言--判断发票取消正式表中,FNS110数据是否准确                if case_data["check_sql_02"]:                    if case_data["case_id"] == 'case_0':                        db_actual_results_02 = list({db_actual_results_02 for db_actual_results_02 in                                                  list(self.db.get_all(case_data["check_sql_02"]))})                        print(db_actual_results_02)                        try:                            assert db_actual_results_02[0][0] == case_data["FNS110_json"]["sourceTrxId"]                            logging.info('断言成功,数据生成至发票取消原始表中')                        except KeyError:                            logging.info('断言失败，测试不通过')                    elif case_data["case_id"] == 'case_1':                        db_actual_results = list({db_actual_results for db_actual_results in                                                  self.db.get_all(case_data["check_sql_01"])})                        try:                            assert db_actual_results[0][0] == "1154-校验'trxTypeCode':must not be blank"                            assert db_actual_results[0][1] == 'N'                            assert db_actual_results[0][3] == case_data["json"][1]["sourceCode"]                            assert db_actual_results[0][4] == case_data["json"][1]["sourceTrxId"]                            assert db_actual_results[0][5] == case_data["json"][1]["sourceDocNumber"]                            logging.info('断言成功,数据成功生成至应付发票临时表中，且状态为N,数据为无效数据')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                    elif case_data["case_id"] == 'case_2':                        db_actual_results = list({db_actual_results for db_actual_results in                                                  self.db.get_all(case_data["check_sql_01"])})                        try:                            assert db_actual_results[0][0] == "1104-校验发票编号'202306256003':应付发票不存在或者未汇总同步到财务系统"                            assert db_actual_results[0][1] == 'N'                            assert db_actual_results[0][3] == case_data["json"][2]["sourceCode"]                            assert db_actual_results[0][4] == case_data["json"][2]["sourceTrxId"]                            assert db_actual_results[0][5] == case_data["json"][2]["sourceDocNumber"]                            logging.info('断言成功,数据成功生成至应付发票临时表中，且状态为N,数据为无效数据')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["FNS110_json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], FNS110_result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], FNS110_expected))                raise i            else:                logging.info("用例FNS110生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_invoiceCancel_FNS110 = TestInvoiceCancelFNS110()    self_invoiceCancel_FNS110.test_invoiceCancel_FNS110()