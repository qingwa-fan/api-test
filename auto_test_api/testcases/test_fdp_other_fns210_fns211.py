import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_other_fns210_fns211.json")logging = Logger(__name__).get_logger()@allure.feature('其他业务接口10_FNS210_FNS211')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestOtherFNS211:    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 删除其他业务接口FNS210临时头表中数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_HEADER_TEMP WHERE  SOURCE_TRX_ID ='FNS-20230626-001'")        # 删除其他业务接口FNS210正式头表数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_HEADER_T WHERE  SOURCE_TRX_ID ='FNS-20230626-001'")        # 删除其他业务接口FNS211临时头表中数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_HEADER_TEMP WHERE  SOURCE_TRX_ID ='FNS-20230626-002'")        # 删除其他业务接口FNS211正式头表数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_HEADER_T WHERE  SOURCE_TRX_ID ='FNS-20230626-002'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 删除其他业务接口FNS210临时头表中数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_HEADER_TEMP WHERE  SOURCE_TRX_ID ='FNS-20230626-001'")        # 删除其他业务接口FNS210正式头表数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_HEADER_T WHERE  SOURCE_TRX_ID ='FNS-20230626-001'")        # 删除其他业务接口FNS211临时头表中数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_HEADER_TEMP WHERE  SOURCE_TRX_ID ='FNS-20230626-002'")        # 删除其他业务接口FNS211正式头表数据        self.db.del_data("DELETE  FROM FDP_FIN_COMMON_HEADER_T WHERE  SOURCE_TRX_ID ='FNS-20230626-002'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型FNS211是否正确生成数据，并且可以成功汇总且推送")    @allure.story('业务类型FNS211测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_other_FNS210(self, case_data,base_headers):        with allure.step("准备FNS211测试数据"):            url = conf.get("project_url", "url") + case_data["url"]            method = case_data["method"]            # 预期结果            FNS210_expected = case_data["FNS210_expected"]            FNS211_expected = case_data["FNS211_expected"]        # 调用其他业务接口接口，生成FNS211数据        with allure.step("执行接口请求,生成FNS211数据"):            FNS210_response = self.http.send(url=url, method=method, json=case_data["FNS210_json"],headers=base_headers)            FNS211_response = self.http.send(url=url, method=method, json=case_data["FNS211_json"], headers=base_headers)            FNS210_result = FNS210_response.json()            FNS211_result = FNS211_response.json()        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert FNS210_expected["code"] == FNS210_result["code"]                assert FNS211_expected["msg"] == FNS211_result["msg"]                # 数据库断言--断言数据FNS210是否准确生成至其他业务接口临时头表中                if case_data["check_sql_01"]:                    db_actul_results = list({db_actul_results for db_actul_results in                                                list(self.db.get_all(case_data["check_sql_01"]))})                    print(db_actul_results)                try:                    assert db_actul_results[0][0] == case_data["FNS210_json"]["sourceTrxId"]                    logging.info('数据FNS210准确生成至其他业务接口头表中,数据为有效数据')                except KeyError as e:                    logging.info(f'数据FNS210未准确生成至其他业务接口头表中：{e}')                # 数据库断言--断言数据FNS210是否准确生成至其他业务接口汇总头表中                if case_data["check_sql_02"]:                    db_actul_results_02 = list({db_actul_results_02 for db_actul_results_02 in                                                list(self.db.get_all(case_data["check_sql_02"]))})                try:                    assert db_actul_results_02[0][0] == case_data["FNS210_json"]["sourceTrxId"]                    logging.info('数据FNS210准确生成至其他业务接口头表中,数据为有效数据')                except KeyError as e:                    logging.info(f'数据FNS210未准确生成至其他业务接口头表中：{e}')                # 数据库断言--断言数据FNS211是否准确生成至其他业务接口临时头表中                if case_data["check_sql_03"]:                    db_actul_results_03 = list({db_actul_results_03 for db_actul_results_03 in                                                list(self.db.get_all(case_data["check_sql_03"]))})                    print(db_actul_results_03)                try:                    assert db_actul_results_03[0][0] == case_data["FNS211_json"]["sourceTrxId"]                    logging.info('数据FNS211准确生成至其他业务接口头表中,数据为有效数据')                except KeyError as e:                    logging.info(f'数据FNS211未准确生成至其他业务接口头表中：{e}')                # 数据库断言--断言数据FNS211是否准确生成至其他业务接口汇总头表中                if case_data["check_sql_04"]:                    db_actul_results_04 = list({db_actul_results_04 for db_actul_results_04 in                                                list(self.db.get_all(case_data["check_sql_04"]))})                try:                    assert db_actul_results_04[0][0] == case_data["FNS211_json"]["sourceTrxId"]                    logging.info('数据FNS211准确生成至其他业务接口头表中,数据为有效数据')                except KeyError as e:                    logging.info(f'数据FNS211未准确生成至其他业务接口头表中：{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["FNS211_json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], FNS211_result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], FNS211_expected))                raise i            else:                logging.info("用例FNS211生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_FNS211 = TestOtherFNS211()    self_test_FNS211.test_other_FNS211()