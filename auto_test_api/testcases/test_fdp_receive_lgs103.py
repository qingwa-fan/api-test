import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_receive_lgs103.json")logging = Logger(__name__).get_logger()@allure.feature('应收事务处理接口_LGS103')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestReceivableLGS103():    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 删除应收事务临时表中数据        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL_TEMP  WHERE TRX_TYPE = 'LGS103'  "                         "AND SOURCE_TRX_ID ='LGS-20230626001'")        # 删除应收事务正式表中数据        self.db.del_data("DELETE   FROM XX_AR_TRX_DETAIL  WHERE TRX_TYPE = 'LGS103'  "                         "AND SOURCE_TRX_ID ='LGS-20230626001'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 删除应收事务临时表中数据        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL_TEMP  WHERE TRX_TYPE = 'LGS103'  "                         "AND SOURCE_TRX_ID ='LGS-20230626001'")        # 删除应收事务正式表中数据        self.db.del_data("DELETE   FROM XX_AR_TRX_DETAIL  WHERE TRX_TYPE = 'LGS103'  "                         "AND SOURCE_TRX_ID ='LGS-20230626001'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型LGS103是否正确生成数据，并且可以成功汇总且推送")    @allure.story('业务类型LGS103测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_receivable_LGS103(self, case_data,base_headers):        with allure.step("准备LGS103测试数据"):            url = conf.get("project_url", "url") + case_data["url"]            method = case_data["method"]            # 预期结果            expected = case_data["expected"]        # 调用应收事务接口，生成LGS103数据        with allure.step("执行接口请求,生成LGS103数据"):            response = self.http.send(url=url, method=method, json=case_data["json"],headers=base_headers)            result = response.json()            # result = response.text        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert expected["code"] == result["code"]                assert expected["msg"] == result["msg"]                # 数据库断言--断言数据是否生成至应收事务临时表中，判断SOURCE_TRX_ID                if case_data["check_sql_01"]:                    temporary_results_id = list({SOURCE_TRX_ID for SOURCE_TRX_ID in list(self.db.get_all(case_data["check_sql_01"]))})                    try:                        assert temporary_results_id[0][0] == case_data["json"][0]["sourceTrxId"]                        logging.info('断言成功,数据成功生成至应收事务临时表中')                    except KeyError as e:                        print(f'断言失败,数据未生成至应收事务临时表中：{e}')                # 数据库断言--断言数据是否生成至应收事务正式表中，判断SOURCE_TRX_ID                if case_data["check_sql_02"]:                    formal_results = list({SOURCE_TRX_ID for SOURCE_TRX_ID in list(self.db.get_all(case_data["check_sql_02"]))})                    try:                        assert formal_results[0][0] == case_data["json"][0]["sourceTrxId"]                        logging.info('断言成功,数据成功生成至应收事务正式表中')                    except KeyError as e:                        logging.info(f'断言失败,数据未生成至应收事务正式表中:{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], expected))                raise i            else:                logging.info("用例LGS103生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_LGS103 = TestReceivableLGS103()    self_test_LGS103.test_receivable_LGS103()