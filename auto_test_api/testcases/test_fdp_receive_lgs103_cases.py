import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_receive_lgs103_cases.json")logging = Logger(__name__).get_logger()@allure.feature('应收事务处理接口_LGS103')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestReceivableLGS103():    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 删除应收事务临时表中数据        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL_TEMP  WHERE TRX_TYPE = 'LGS103'  "                         "AND SOURCE_TRX_ID ='LGS103_230621001'")        # 删除应收事务明细表中数据        self.db.del_data("DELETE   FROM XX_AR_TRX_DETAIL  WHERE TRX_TYPE = 'LGS103'  "                         "AND SOURCE_TRX_ID ='LGS103_230621001'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 删除应收事务临时表中数据        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL_TEMP  WHERE TRX_TYPE = 'LGS103'  "                         "AND SOURCE_TRX_ID ='LGS103_230621001'")        # 删除应收事务明细表中数据        self.db.del_data("DELETE   FROM XX_AR_TRX_DETAIL  WHERE TRX_TYPE = 'LGS103'  "                         "AND SOURCE_TRX_ID ='LGS103_230621001'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型LGS103是否正确生成数据，并且可以成功汇总且推送")    @allure.story('业务类型LGS103测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_receivable_LGS103(self, case_data,base_headers):        with allure.step("准备LGS103测试数据"):            url = conf.get("project_url", "url") + case_data["url"]            method = case_data["method"]            # 预期结果            expected = case_data["expected"]        # 调用应收事务接口，生成LGS103数据        with allure.step("执行接口请求,生成LGS103数据"):            response = self.http.send(url=url, method=method, json=case_data["json"],headers=base_headers)            result = response.json()        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert expected["code"] == result["code"]                assert expected["msg"] == result["msg"]                # 数据库断言--断言数据是否正确生成至应收事务临时表中                if case_data["check_sql_01"]:                    db_actual_results = list({db_actual_results for db_actual_results in list(self.db.get_all(case_data["check_sql_01"]))})                    print()                    try:                        assert db_actual_results[0][0] == case_data["json"][0]["sourceCode"]                        assert db_actual_results[0][1] == case_data["json"][0]["sourceTrxId"]                        assert db_actual_results[0][2] == case_data["json"][0]["trxType"]                        assert db_actual_results[0][3] == case_data["json"][0]["trxSubType"]                        assert db_actual_results[0][4] == case_data["json"][0]["companyCode"]                        assert db_actual_results[0][5] == case_data["json"][0]["country"]                        assert db_actual_results[0][6] == case_data["json"][0]["customerNumber"]                        assert db_actual_results[0][7] == case_data["json"][0]["currencyCode"]                        assert db_actual_results[0][8] == int(case_data["json"][0]["lineAmount"])                        assert db_actual_results[0][9] == case_data["json"][0]["purchaseOrderId"]                        assert db_actual_results[0][10] == case_data["json"][0]["purchaseOrderProductId"]                        assert db_actual_results[0][11] == None                        assert db_actual_results[0][12] == 0                        assert db_actual_results[0][13] == case_data["json"][0]["attribute4"]                        assert db_actual_results[0][14] == case_data["json"][0]["attribute14"]                        logging.info('断言成功，LGS103数据成功生成至应收事务明细表中')                    except KeyError as e:                        logging.info(f'断言失败，LGS103数据未准确生成至应收事务明细表中：{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], expected))                raise i            else:                logging.info("用例LGS103生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_LGS103 = TestReceivableLGS103()    self_test_LGS103.test_receivable_LGS103()