import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_receive_osj108_b2b103.json")logging = Logger(__name__).get_logger()@allure.feature('应收事务处理接口_OSJ108_B2B103')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))class TestReceivableB2B103:    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 依次删除应收事务临时表中OSJ108、B2B103数据        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL_TEMP  WHERE PURCHASE_ORDER_PRODUCT_ID like '23061300%'")        # 依次删除应收事务明细表中OSJ108、B2B103数据        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL WHERE PURCHASE_ORDER_PRODUCT_ID like '23061300%'")        # 依次删除应收事务临时表、明细表中相同暂估id的数据        self.db.del_data("DELETE FROM XX_AR_TRX_DETAIL_TEMP  WHERE ATTRIBUTE4  = '6130012023'")        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL WHERE ATTRIBUTE4  ='6130012023'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 依次删除应收事务临时表中OSJ108、B2B103数据        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL_TEMP  WHERE PURCHASE_ORDER_PRODUCT_ID like '23061300%'")        # 依次删除应收事务明细表中OSJ108、B2B103数据        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL WHERE PURCHASE_ORDER_PRODUCT_ID like '23061300%'")        # 依次删除应收事务临时表、明细表中相同暂估id的数据        self.db.del_data("DELETE FROM XX_AR_TRX_DETAIL_TEMP  WHERE ATTRIBUTE4  ='6130012023'")        self.db.del_data("DELETE  FROM XX_AR_TRX_DETAIL WHERE ATTRIBUTE4  ='6130012023'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        return casedata    @allure.title("测试业务类型B2B103是否正确生成数据")    @allure.story('业务类型B2B103测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_receivable_B2B103(self, case_data,base_headers):        with allure.step("准备B2B103测试数据"):            url = conf.get("project_url", "url") + case_data["url"]            method = case_data["method"]            # 预期结果            OSJ108_expected = case_data["OSJ108_expected"]            B2B103_expected = case_data["B2B103_expected"]        # 调用应收事务接口，生成B2B103数据        with allure.step("执行接口请求,生成OSJ108数据"):            response = self.http.send(url=url, method=method, json=case_data["OSJ108_json"],headers=base_headers)            OSJ108_result = response.json()            # result = response.text        with allure.step("执行接口请求,生成B2B103数据"):            response = self.http.send(url=url, method=method, json=case_data["B2B103_json"],headers=base_headers)            B2B103_result = response.json()        with allure.step("进行预期结果断言"):            try:                # 请求体断言                assert OSJ108_expected["code"] == OSJ108_result["code"]                assert OSJ108_expected["msg"] == OSJ108_result["msg"]                assert B2B103_expected["code"] == B2B103_result["code"]                assert B2B103_expected["msg"] == B2B103_result["msg"]                logging.info('断言成功,返回信息正确')                # 数据库断言--判断应收明细表中,B2B103与OSJ108的PURCHASE_ORDER_PRODUCT_ID、暂估id、company_code、往来单位存值是否一致                if case_data["check_sql_01"]:                    if case_data["case_id"] == 'case_0':                        db_actual_results = list({TEMP_actual_results for TEMP_actual_results in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        print(db_actual_results)                        try:                            assert db_actual_results[0][0] == db_actual_results[0][5]                            assert db_actual_results[0][1] == db_actual_results[0][6]                            assert db_actual_results[0][2] == db_actual_results[0][7]                            assert db_actual_results[0][3] == db_actual_results[0][8]                            assert db_actual_results[0][4] == db_actual_results[0][9]                            logging.info('断言成功,数据成功生成至应收事务临时表中')                        except KeyError as e:                            logging.info(f'断言失败,数据生成至应收事务临时表中错误:{e}')                    # 数据库断言--判断应收事务临时表中状态以及报错信息                    elif case_data["case_id"] == 'case_1':                        db_actual_results_1 = list({db_actual_results_1 for db_actual_results_1 in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        try:                            assert db_actual_results_1[0][0] == 1                            assert db_actual_results_1[0][1] == '系统中不存在相同公司相同的暂估id暂估历史数据'                            logging.info('断言成功,数据成功生成至应收事务临时表中,并且报错提醒')                        except KeyError as e:                            logging.info(f'断言失败,数据生成错误:{e}')                # 数据库断言--判断应收事务明细表中是否生成数据                if case_data["check_sql_02"]:                    if case_data["case_id"] == 'case_2':                        db_actual_results = list({TEMP_actual_results for TEMP_actual_results in                                                  list(self.db.get_all(case_data["check_sql_01"]))})                        try:                            assert db_actual_results == []                            logging.info('断言成功,数据未生成至应收事务明细表中')                        except KeyError as e:                            logging.info(f'断言失败，测试不通过,数据生成至应收事务明细表中错误{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["B2B103_json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], B2B103_result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], B2B103_expected))                raise i            else:                logging.info("用例B2B103生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_B2B103 = TestReceivableB2B103()    self_test_B2B103.test_receivable_B2B103()