import osimport pytestimport allurefrom common.contants import DATA_DIRfrom common.read_json import ReadJsonfrom common.handle_request import HandleRequestfrom common.handle_oracle import HandleDbfrom common.config import conffrom common.my_log import LoggerTEST_DATA_PLAN = os.path.join(DATA_DIR, "test_fdp_other_fns201.json")   # 导入测试数据的路径logging = Logger(__name__).get_logger()@allure.feature('其他业务接口_FNS201')@allure.testcase(conf.get("project_url", "url"), "测试地址：{}".format(conf.get("project_url", "url")))   # 目的：class TestOtherFNS201:    # 准备    json_object = ReadJson(TEST_DATA_PLAN)    json_datas = json_object.read_json()    cases = json_datas["cases"]    print(cases)    http = HandleRequest()    db = HandleDb()    @classmethod    def setup_class(self):        logging.info('------>执行前置操作,删除已存在的测试数据')        # 删除其他业务接口原始头表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_TEMP WHERE SOURCE_TRX_ID ='e6c70f93-0e7d-11ee-993c-ae541fa9fcce'")        # 删除其他业务接口正式头表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_T WHERE SOURCE_TRX_ID ='e6c70f93-0e7d-11ee-993c-ae541fa9fcce'")    @classmethod    def teardown_class(self):        logging.info('------>执行后置操作,清理测试数据')        # 删除其他业务接口原始头表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_TEMP WHERE SOURCE_TRX_ID ='e6c70f93-0e7d-11ee-993c-ae541fa9fcce'")        # 删除其他业务接口正式头表中数据        self.db.del_data("DELETE FROM FDP_FIN_COMMON_HEADER_T WHERE SOURCE_TRX_ID ='e6c70f93-0e7d-11ee-993c-ae541fa9fcce'")        self.db.close()    @pytest.fixture()    # request.param：用于获取测试的请求参数    def case_data(self, request):        casedata = request.param        # print(casedata)        return casedata    @allure.title("测试业务类型FNS201是否正确生成数据，并且可以成功汇总且推送")    @allure.story('业务类型FNS201测试用例')    @pytest.mark.parametrize('case_data', cases, indirect=True)    def test_other_FDP201(self, case_data, base_headers):        with allure.step("准备FNS201测试数据"):            url = conf.get("project_url", "url") + case_data["url"]            method = case_data["method"]            # 预期结果            expected = case_data["expected"]            # print(expected["code"])        # 调用应收事务接口，生成FNS201数据        with allure.step("执行接口请求,生成FNS201数据"):            response = self.http.send(url=url, method=method, json=case_data["json"], headers=base_headers)            result = response.json()            # result = response.text            # print(result)        with allure.step("进行预期结果断言"):            try:                # 响应体断言                assert expected["code"] == result["code"]                assert expected["msg"] == result["msg"]                # 数据库断言--断言数据是否生成至应付发票原始临时表中，判断头表header_id是否等于行表header_id、行总金额是否等于头总金额、以及状态                if case_data["check_sql_01"]:                    db_actul_results = list({db_actul_results for db_actul_results in                                             self.db.get_all(case_data["check_sql_01"])})                    print(db_actul_results)                try:                    assert db_actul_results[0][0] == case_data["json"]["trxAmount"]                    assert db_actul_results[0][1] == case_data["json"]["sourceTrxId"]                    # assert temp_actul_results[0][2] == None                    # assert temp_actul_results[0][3] == case_data["json"][0]["sourceTrxId"]                    # assert temp_actul_results[0][4] == case_data["json"][0]["companyCode"]                    # assert temp_actul_results[0][5] == case_data["json"][0]["partyNum"]                    # assert temp_actul_results[0][6] == temp_actul_results[0][7] == 1                    # assert temp_actul_results[0][8] == case_data["json"][0]["trxAmount"]                    # assert temp_actul_results[0][9] == case_data["json"][0]["channel"]                    # assert temp_actul_results[0][10] == case_data["json"][0]["product"]                    logging.info('数据成功生成至其他业务接口临时行表、头表中,并且状态为S,数据为有效数据')                except KeyError as e:                    logging.info(f'数据未生成至其他业务接口临时行表、头表中：{e}')                # 数据库断言--断言数据是否生成至其他业务接口明细表中，判断头表header_id是否等于行表header_id、行总金额是否等于头总金额、以及状态                # if case_data["check_sql_02"]:                #     origin_actul_results = list({origin_actul_results for origin_actul_results in                #                                list(self.db.get_all(case_data["check_sql_02"]))})                #     print(origin_actul_results)                # try:                #     assert origin_actul_results[0][0] == origin_actul_results[0][5]                #     assert origin_actul_results[0][1] == case_data["json"][0]["companyCode"]                #     assert origin_actul_results[0][2] == origin_actul_results[0][6]                #     assert origin_actul_results[0][3] == case_data["json"][0]["partyNum"]                #     assert origin_actul_results[0][4] == origin_actul_results[0][7] == 0                #     logging.info('数据成功生成至其他业务接口明细表中,并且状态为S,数据为有效数据')                # except KeyError as e:                #     logging.info(f'数据未生成至其他业务接口明细表中：{e}')            except AssertionError as i:                logging.error("用例{}生成数据{}--执行失败!".format(case_data["title"], case_data["case_id"]))                logging.debug(                    "用例{}生成数据{}--失败请求参数：{}".format(case_data["title"], case_data["case_id"], case_data["json"]))                logging.error("用例{}生成数据{}--失败请求返回参数：{}".format(case_data["title"], case_data["case_id"], result))                logging.error("用例{}生成数据{}--报错信息：{}".format(case_data["title"], case_data["case_id"], i))                logging.debug("用例{}生成数据{}--预期结果：{}".format(case_data["title"], case_data["case_id"], expected))                raise i            else:                logging.info("用例FDP201生成数据：{}-{}--执行通过".format(case_data["title"], case_data["case_id"]))if __name__ == '__main__':    self_test_FNS201 = TestOtherFNS201()    self_test_FNS201.test_other_FNS201()